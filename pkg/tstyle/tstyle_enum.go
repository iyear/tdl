// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package tstyle

import (
	"fmt"
	"strings"
)

const (
	// StylePlain is a Style of type Plain.
	StylePlain Style = "Plain"
	// StyleUnknown is a Style of type Unknown.
	StyleUnknown Style = "Unknown"
	// StyleMention is a Style of type Mention.
	StyleMention Style = "Mention"
	// StyleHashtag is a Style of type Hashtag.
	StyleHashtag Style = "Hashtag"
	// StyleBotCommand is a Style of type BotCommand.
	StyleBotCommand Style = "BotCommand"
	// StyleURL is a Style of type URL.
	StyleURL Style = "URL"
	// StyleEmail is a Style of type Email.
	StyleEmail Style = "Email"
	// StyleBold is a Style of type Bold.
	StyleBold Style = "Bold"
	// StyleItalic is a Style of type Italic.
	StyleItalic Style = "Italic"
	// StyleCode is a Style of type Code.
	StyleCode Style = "Code"
	// StylePre is a Style of type Pre.
	StylePre Style = "Pre"
	// StyleTextURL is a Style of type TextURL.
	StyleTextURL Style = "TextURL"
	// StyleMentionName is a Style of type MentionName.
	StyleMentionName Style = "MentionName"
	// StylePhone is a Style of type Phone.
	StylePhone Style = "Phone"
	// StyleCashtag is a Style of type Cashtag.
	StyleCashtag Style = "Cashtag"
	// StyleUnderline is a Style of type Underline.
	StyleUnderline Style = "Underline"
	// StyleStrike is a Style of type Strike.
	StyleStrike Style = "Strike"
	// StyleBankCard is a Style of type BankCard.
	StyleBankCard Style = "BankCard"
	// StyleSpoiler is a Style of type Spoiler.
	StyleSpoiler Style = "Spoiler"
	// StyleCustomEmoji is a Style of type CustomEmoji.
	StyleCustomEmoji Style = "CustomEmoji"
	// StyleBlockquote is a Style of type Blockquote.
	StyleBlockquote Style = "Blockquote"
)

var ErrInvalidStyle = fmt.Errorf("not a valid Style, try [%s]", strings.Join(_StyleNames, ", "))

var _StyleNames = []string{
	string(StylePlain),
	string(StyleUnknown),
	string(StyleMention),
	string(StyleHashtag),
	string(StyleBotCommand),
	string(StyleURL),
	string(StyleEmail),
	string(StyleBold),
	string(StyleItalic),
	string(StyleCode),
	string(StylePre),
	string(StyleTextURL),
	string(StyleMentionName),
	string(StylePhone),
	string(StyleCashtag),
	string(StyleUnderline),
	string(StyleStrike),
	string(StyleBankCard),
	string(StyleSpoiler),
	string(StyleCustomEmoji),
	string(StyleBlockquote),
}

// StyleNames returns a list of possible string values of Style.
func StyleNames() []string {
	tmp := make([]string, len(_StyleNames))
	copy(tmp, _StyleNames)
	return tmp
}

// StyleValues returns a list of the values for Style
func StyleValues() []Style {
	return []Style{
		StylePlain,
		StyleUnknown,
		StyleMention,
		StyleHashtag,
		StyleBotCommand,
		StyleURL,
		StyleEmail,
		StyleBold,
		StyleItalic,
		StyleCode,
		StylePre,
		StyleTextURL,
		StyleMentionName,
		StylePhone,
		StyleCashtag,
		StyleUnderline,
		StyleStrike,
		StyleBankCard,
		StyleSpoiler,
		StyleCustomEmoji,
		StyleBlockquote,
	}
}

// String implements the Stringer interface.
func (x Style) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Style) IsValid() bool {
	_, err := ParseStyle(string(x))
	return err == nil
}

var _StyleValue = map[string]Style{
	"Plain":       StylePlain,
	"plain":       StylePlain,
	"Unknown":     StyleUnknown,
	"unknown":     StyleUnknown,
	"Mention":     StyleMention,
	"mention":     StyleMention,
	"Hashtag":     StyleHashtag,
	"hashtag":     StyleHashtag,
	"BotCommand":  StyleBotCommand,
	"botcommand":  StyleBotCommand,
	"URL":         StyleURL,
	"url":         StyleURL,
	"Email":       StyleEmail,
	"email":       StyleEmail,
	"Bold":        StyleBold,
	"bold":        StyleBold,
	"Italic":      StyleItalic,
	"italic":      StyleItalic,
	"Code":        StyleCode,
	"code":        StyleCode,
	"Pre":         StylePre,
	"pre":         StylePre,
	"TextURL":     StyleTextURL,
	"texturl":     StyleTextURL,
	"MentionName": StyleMentionName,
	"mentionname": StyleMentionName,
	"Phone":       StylePhone,
	"phone":       StylePhone,
	"Cashtag":     StyleCashtag,
	"cashtag":     StyleCashtag,
	"Underline":   StyleUnderline,
	"underline":   StyleUnderline,
	"Strike":      StyleStrike,
	"strike":      StyleStrike,
	"BankCard":    StyleBankCard,
	"bankcard":    StyleBankCard,
	"Spoiler":     StyleSpoiler,
	"spoiler":     StyleSpoiler,
	"CustomEmoji": StyleCustomEmoji,
	"customemoji": StyleCustomEmoji,
	"Blockquote":  StyleBlockquote,
	"blockquote":  StyleBlockquote,
}

// ParseStyle attempts to convert a string to a Style.
func ParseStyle(name string) (Style, error) {
	if x, ok := _StyleValue[name]; ok {
		return x, nil
	}
	// Case insensitive parse, do a separate lookup to prevent unnecessary cost of lowercasing a string if we don't need to.
	if x, ok := _StyleValue[strings.ToLower(name)]; ok {
		return x, nil
	}
	return Style(""), fmt.Errorf("%s is %w", name, ErrInvalidStyle)
}

// Set implements the Golang flag.Value interface func.
func (x *Style) Set(val string) error {
	v, err := ParseStyle(val)
	*x = v
	return err
}

// Get implements the Golang flag.Getter interface func.
func (x *Style) Get() interface{} {
	return *x
}

// Type implements the github.com/spf13/pFlag Value interface.
func (x *Style) Type() string {
	return "Style"
}
